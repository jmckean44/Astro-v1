---
import Layout from '../layouts/Layout.astro';
const about = await Astro.glob('../content/about.mdx');
const obj = Object.assign({}, ...about);
const { Content, frontmatter } = obj;
const pageTitle = 'About Us';
//import { fade } from 'astro:transitions';
---

<Layout title="About Us">
	<div class="container top">
		<div class="flex">
			<!-- <h1 transition:animate={fade({ duration: '.5s' })}>{pageTitle}</h1> -->
			<h1>{pageTitle}</h1>
		</div>
	</div>
	<div class="container bottom">
		<div class="flex">
			<div>
				<Content />
			</div>
			<div>
				<Content />
			</div>
			<div>
				<Content />
			</div>
		</div>
	</div>

	<div class="container bottom">
		<div class="grid">
			<div>
				Images in the public folder, as well as remote images not specifically configured in your project, can also be used with the Image component, but will not be processed. can transform a local
				or authorized remote image’s dimensions, file type, and quality for control over your displayed image. The resulting tag includes alt, loading, and decoding attributes and infers image
				dimensions to avoid Cumulative Layout Shift.
			</div>
			<div>
				Images in the public folder, as well as remote images not specifically configured in your project, can also be used with the Image component, but will not be processed. can transform a local
				or authorized remote image’s dimensions, file type, and quality for control over your displayed image.
			</div>
			<div>
				Images in the public folder, as well as remote images not specifically configured in your project, can also be used with the Image component, but will not be processed. can transform a local
				or authorized remote image’s dimensions, file type, and quality for control over your displayed image. The resulting tag includes alt, loading, and decoding attributes and infers image
				dimensions to avoid Cumulative Layout Shift.
			</div>
		</div>
	</div>
</Layout>
